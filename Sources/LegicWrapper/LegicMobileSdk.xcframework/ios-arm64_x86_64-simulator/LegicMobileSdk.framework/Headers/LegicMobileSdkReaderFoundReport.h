// -----------------------------------------------------------------------------
// Copyright (C) LEGIC (R) Identsystems AG, CH-8620 Wetzikon
// Confidential. All rights reserved!
// -----------------------------------------------------------------------------

#import <Foundation/Foundation.h>

/**
 * Report summarizing information gathered from received reader advertisement packages.
 * This information shall help the app to decide if it wants to connect to a specific reader.
 * This object is hashable and comparable based on the reader UUID.
 */
NS_SWIFT_NAME(ReaderFoundReport)
@interface LegicMobileSdkReaderFoundReport : NSObject

//-----------------------------------------------------------------------------|
/**
 * Returns the mode a reader is currently operating in.
 *
 * @return  The current reader operation mode
 * @see LegicMobileSdkReaderOperationMode
 */
- (E_LegicMobileSdkReaderOperationMode)getReaderOperationMode
NS_SWIFT_NAME(getReaderOperationMode());

//-----------------------------------------------------------------------------|
/**
 * Returns the reader designator.
 *
 * @return  The reader designator
 */
- (NSData* const)getReaderDesignator
NS_SWIFT_NAME(getReaderDesignator());

//-----------------------------------------------------------------------------|
/**
 * Returns the reader RSSI advertisement value.
 *
 * @return  Current RSSI value
 */
- (NSInteger)getRssi
NS_SWIFT_NAME(getRssi());

//-----------------------------------------------------------------------------|
/**
 * Returns the reader transmit power.
 * If the tx power is not present, NSIntegerMin shall be returned.
 * Use function hasTxPower() for easier determination if tx power is present.
 *
 * @return  Current tx power
 */
- (NSInteger)getTxPower
NS_SWIFT_NAME(getTxPower());



//-----------------------------------------------------------------------------|
/**
 * Returns the readers transmit power state.
 *
 * @return <li><code>true</code> tx power is present</li>
 *         <li><code>false</code> tx power is not present</li>
 */
- (BOOL)hasTxPower
NS_SWIFT_NAME(hasTxPower());



//-----------------------------------------------------------------------------|
/**
 * Returns the timestamp when the ReaderFoundReport was last generated by the SDK.
 *
 * @return  Timestamp in milliseconds
 */
-(NSUInteger)getTimestamp
NS_SWIFT_NAME(getTimestamp());

//-----------------------------------------------------------------------------|
/**
 * Returns the reader <code>UUID</code> (universally unique identifier).
 *
 * @return  Reader UUID
 */
-(NSUUID* const)getReaderUuid
NS_SWIFT_NAME(getReaderUuid());


@end

